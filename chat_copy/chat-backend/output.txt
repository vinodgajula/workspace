=== ChatAppApplication.java ===
package com.chatapp;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.cassandra.repository.config.EnableCassandraRepositories;

@SpringBootApplication
@EnableCassandraRepositories  // ✅ Required for Cassandra repositories
public class ChatAppApplication {
    public static void main(String[] args) {
        SpringApplication.run(ChatAppApplication.class, args);
    }
}


=== CassandraConfig.java ===
package com.chatapp.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.cassandra.config.AbstractCassandraConfiguration;

@Configuration
public class CassandraConfig extends AbstractCassandraConfiguration {

    @Value("${spring.cassandra.keyspace-name}")
    private String keyspace;

    @Value("${spring.cassandra.contact-points}")
    private String contactPoints;

    @Value("${spring.cassandra.port}")
    private int port;

    @Override
    protected String getKeyspaceName() {
        return keyspace;
    }

    @Override
    protected String getContactPoints() {
        return contactPoints;
    }

    @Override
    protected int getPort() {
        return port;
    }

    @Override
    protected String getLocalDataCenter() {
        return "datacenter1"; // Required for Cassandra 4.x+
    }
}


=== KafkaConfig.java ===
package com.chatapp.config;

import org.apache.kafka.clients.admin.NewTopic;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.*;

import java.util.HashMap;
import java.util.Map;

@Configuration
public class KafkaConfig {

    @Value("${spring.kafka.bootstrap-servers}")
    private String bootstrapServers;

    private static final String TOPIC_NAME = "chat-messages";

    @Bean
    public NewTopic chatTopic() {
        return new NewTopic(TOPIC_NAME, 1, (short) 1);
    }

    @Bean
    public ProducerFactory<String, String> producerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, String> kafkaTemplate() {
        return new KafkaTemplate<>(producerFactory());
    }

    @Bean
    public ConsumerFactory<String, String> consumerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
        config.put(ConsumerConfig.GROUP_ID_CONFIG, "chat-group");
        config.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        config.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        return new DefaultKafkaConsumerFactory<>(config);
    }

    @Bean
    public ConcurrentKafkaListenerContainerFactory<String, String> kafkaListenerFactory() {
        ConcurrentKafkaListenerContainerFactory<String, String> factory =
                new ConcurrentKafkaListenerContainerFactory<>();
        factory.setConsumerFactory(consumerFactory());
        return factory;
    }
}


=== SecurityConfig.java ===
package com.chatapp.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf().disable() // Disable CSRF
            .cors().and() // Enable CORS
            .authorizeHttpRequests(auth -> auth
                .requestMatchers(
                    "/swagger-ui/**", 
                    "/v3/api-docs/**"
                ).permitAll()  // Allow Swagger UI without authentication
                .anyRequest().authenticated() // Require authentication for all other requests
            )
            .httpBasic(); // Enable HTTP Basic authentication

        return http.build();
    }

    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**")
                        .allowedOrigins("http://localhost:3000") // Allow frontend origin
                        .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS") // Allow specific HTTP methods
                        .allowedHeaders("*") // Allow all headers
                        .allowCredentials(true); // Allow credentials (e.g., cookies)
            }
        };
    }
}

=== SwaggerConfig.java ===
package com.chatapp.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SwaggerConfig {

    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI()
                .info(new Info().title("Chat App API").version("1.0"))
                .addSecurityItem(new SecurityRequirement().addList("basicAuth"))
                .components(new io.swagger.v3.oas.models.Components()
                        .addSecuritySchemes("basicAuth",
                                new SecurityScheme()
                                        .type(SecurityScheme.Type.HTTP)
                                        .scheme("basic")));
    }
}


=== ChatController.java ===
package com.chatapp.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.chatapp.model.Message;
import com.chatapp.service.MessageService;

@RestController
@RequestMapping("/chat")
public class ChatController {

    private static final Logger logger = LoggerFactory.getLogger(ChatController.class);

    @Autowired
    private MessageService messageService;

    @PostMapping("/send")
    public String sendMessage(@RequestBody Message message) {
        logger.info("Sending message from '{}' to '{}'", message.getSender(), message.getReceiver());
        messageService.sendMessage(message);
        logger.info("Message sent successfully");
        return "Message Sent!";
    }

    @GetMapping("/messages")
    public List<Message> getMessages(
            @RequestParam String user1,
            @RequestParam String user2) {
        logger.info("Fetching messages between '{}' and '{}'", user1, user2);
        List<Message> messages = messageService.getMessagesBetween(user1, user2);
        logger.info("Fetched {} messages", messages.size());
        return messages;
    }
}


=== Message.java ===
package com.chatapp.model;

import java.util.UUID;

import org.springframework.data.cassandra.core.mapping.Column;
import org.springframework.data.cassandra.core.mapping.PrimaryKeyColumn;
import org.springframework.data.cassandra.core.mapping.Table;
import org.springframework.data.cassandra.core.cql.PrimaryKeyType;
import org.springframework.data.cassandra.core.cql.Ordering;

@Table("messages")
public class Message {

    @PrimaryKeyColumn(name = "sender", type = PrimaryKeyType.PARTITIONED)
    private String sender;

    @PrimaryKeyColumn(name = "receiver", type = PrimaryKeyType.PARTITIONED)
    private String receiver;

    @PrimaryKeyColumn(name = "timestamp", ordinal = 0, type = PrimaryKeyType.CLUSTERED, ordering = Ordering.ASCENDING)
    private long timestamp;

    @Column("id")
    private UUID id = UUID.randomUUID();

    @Column("content")
    private String content;

    @Column("status")
    private MessageStatus status = MessageStatus.SENT;

    public Message() {}

    public Message(String sender, String receiver, long timestamp, String content) {
        this.sender = sender;
        this.receiver = receiver;
        this.timestamp = timestamp;
        this.content = content;
        this.id = UUID.randomUUID();
        this.status = MessageStatus.SENT;
    }

    // Getters and Setters
    public String getSender() { return sender; }
    public void setSender(String sender) { this.sender = sender; }

    public String getReceiver() { return receiver; }
    public void setReceiver(String receiver) { this.receiver = receiver; }

    public long getTimestamp() { return timestamp; }
    public void setTimestamp(long timestamp) { this.timestamp = timestamp; }

    public UUID getId() { return id; }
    public void setId(UUID id) { this.id = id; }

    public String getContent() { return content; }
    public void setContent(String content) { this.content = content; }

    public MessageStatus getStatus() { return status; }
    public void setStatus(MessageStatus status) { this.status = status; }
}


=== MessageStatus.java ===
package com.chatapp.model;

public enum MessageStatus {
    SENT,
    DELIVERED,
    READ
}


=== User.java ===
package com.chatapp.model;

import org.springframework.data.cassandra.core.mapping.PrimaryKey;
import org.springframework.data.cassandra.core.mapping.Table;

@Table
public class User {
    @PrimaryKey
    private String id;
    private String username;
    private String email;
    private String password;

    public User() {}

    public User(String id, String username, String email, String password) {
        this.id = id;
        this.username = username;
        this.email = email;
        this.password = password;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}


=== MessageRepository.java ===
package com.chatapp.repository;

import java.util.List;
import java.util.UUID;

import org.springframework.data.cassandra.repository.CassandraRepository;
import org.springframework.stereotype.Repository;

import com.chatapp.model.Message;

@Repository
public interface MessageRepository extends CassandraRepository<Message, UUID> {
    List<Message> findBySenderAndReceiver(String sender, String receiver);

    // Optional: find messages between a timestamp range
    List<Message> findBySenderAndReceiverAndTimestampGreaterThanEqualAndTimestampLessThanEqual(
        String sender, String receiver, long start, long end);
}


=== KafkaConsumer.java ===
package com.chatapp.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

import com.chatapp.model.Message;
import com.chatapp.model.MessageStatus;
import com.chatapp.repository.MessageRepository;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class KafkaConsumer {

    private static final Logger logger = LoggerFactory.getLogger(KafkaConsumer.class);

    @Autowired
    private ObjectMapper objectMapper;

    @Autowired
    private MessageRepository messageRepository;

    @KafkaListener(topics = "chat-messages", groupId = "chat-group")
    public void consume(String jsonMessage) {
        try {
            // 🔄 Convert JSON string back to Message object
            Message message = objectMapper.readValue(jsonMessage, Message.class);

            logger.info("📩 Received Message: {}", message.getContent());

            // ✅ Update status to DELIVERED
            message.setStatus(MessageStatus.DELIVERED);

            // 💾 Save updated message
            messageRepository.save(message);

        } catch (Exception e) {
            logger.error("❌ Error processing message: ", e);
        }
    }
}


=== KafkaProducer.java ===
package com.chatapp.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import com.chatapp.model.Message;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@Service
public class KafkaProducer {
    private static final String TOPIC = "chat-messages";

    @Autowired
    private KafkaTemplate<String, String> kafkaTemplate;
    
    @Autowired
    private ObjectMapper objectMapper;
    
    public void sendMessage(Message message) {
        try {
            String json = objectMapper.writeValueAsString(message);
            kafkaTemplate.send(TOPIC, json);
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }
    }
}    


=== MessageService.java ===
package com.chatapp.service;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.chatapp.model.Message;
import com.chatapp.repository.MessageRepository;

@Service
public class MessageService {

    @Autowired
    private MessageRepository messageRepository;

    @Autowired
    private KafkaProducer kafkaProducer;
    
    public void sendMessage(Message message) {
        kafkaProducer.sendMessage(message);
        messageRepository.save(message);
    }

    public List<Message> getMessagesBetween(String user1, String user2) {
        List<Message> list1 = messageRepository.findBySenderAndReceiver(user1, user2);
        List<Message> list2 = messageRepository.findBySenderAndReceiver(user2, user1);
    
        List<Message> allMessages = new ArrayList<>();
        allMessages.addAll(list1);
        allMessages.addAll(list2);
    
        // Optional: sort messages by timestamp 
        allMessages.sort(Comparator.comparingLong(Message::getTimestamp));
        return allMessages;
    }
}


=== application.yml ===
server:
  port: 8080

spring:
  kafka:
    bootstrap-servers: kafka:9092
  cassandra:
    keyspace-name: chat_app
    contact-points: cassandra
    port: 9042
    schema-action: create-if-not-exists
  security:
    user:
      name: admin
      password: admin123


=== logback-spring.xml ===
<configuration>
    <include resource="org/springframework/boot/logging/logback/base.xml"/>
    <logger name="com.chatapp" level="DEBUG"/>
</configuration>

=== schema.cql ===
CREATE TABLE IF NOT EXISTS messages (sender TEXT, receiver TEXT, timestamp BIGINT, id UUID, content TEXT, PRIMARY KEY ((sender, receiver), timestamp)) WITH CLUSTERING ORDER BY (timestamp ASC);


=== MANIFEST.MF ===
Manifest-Version: 1.0
Main-Class: org.springframework.boot.loader.JarLauncher
Start-Class: com.chatapp.ChatAppApplication

